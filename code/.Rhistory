library(Rmisc)
library(rcompanion)
library(stargazer)
library(randomForest)
library(smotefamily)
library(caTools)
library(ggpubr)
library(tidyr)
library(ggExtra)
library(gbm)
# Add probability of roll to data set
probs_lookup <- function(data, prob_table, cols){
for(i in seq(length(cols))){
data <- merge(data, prob_table, by.x = cols[i] , by.y = "roll",
all.x = TRUE, all.y = FALSE, no.dups = TRUE)
data$probability[is.na(data$probability)] <- 0
# Renaming column
names(data)[names(data)=="probability"] <- paste("tile_prob_", i, sep = "")
}
return(data)
}
raw$player <- as.factor(raw$player)
raw["tradeVolume"] <- raw$tradeGain+raw$tradeLoss
# Points as function of production
prod_plot <- ggplot(raw, aes(x = production, y = points))+
geom_point()+
geom_smooth()+
labs(title = "Points by Resource Production", x = "Total Resource Production", y = "Total Points", color = "Player Order")+
theme_bw()
# Points as function of trade_
trade_plot <- ggplot(raw, aes(x = tradeVolume, y = points))+
geom_point()+
geom_smooth()+
labs(title = "Points by Trade Volume", x = "Total Trade Volume", y = "Total Points", color = "Player Order")+
theme_bw()
# Points as function of tribute loss
trib_plot <- ggplot(raw, aes(x = tribute, y = points))+
geom_point()+
geom_smooth()+
labs (title = "Points by Tribute Loss", x = "Resources Lost to Tribute", y = "Total Points", color = "Player Order")+
theme_bw()
# Points as function of player order
order_plot <- ggplot(raw, aes(x = player, y = points))+
geom_boxplot(notch = TRUE)+
labs(title = "Points by Player Order",x = "Player Order", y = "Total Points", fill = "Player Order")+
theme_bw()
ggarrange(prod_plot, trade_plot, trib_plot, order_plot, ncol = 2, nrow = 2)
# Assess Correlation between these factors
temp <- raw[c("production", "tradeVolume", "tribute","points")]
names(temp) <- c("Total Production", "Trade Volume", "Tribute", "Points")
corrplot(cor(temp), type = "upper", method = "pie", tl.col = "black", tl.cex = 0.75,diag = FALSE)
data <- raw
data$player <- as.factor(data$player)
data["win"] <- ifelse(data["points"] >= 10, 1, 0) # identify game winner
data <- subset.data.frame(data, select = -c(me), drop = TRUE) # drop unnecessary fields
# rename resource columns
data <- setnames(data,
old = c("X", "X.2", "X.4", "X.5", "X.7", "X.9"),
new = c("tile_res_1", "tile_res_2", "tile_res_3", "tile_res_4", "tile_res_5", "tile_res_6")
)
# rename number columns
data <- setnames(data,
old = c("settlement1", "X.1", "X.3", "settlement2", "X.6", "X.8"),
new = c("tile_no_1", "tile_no_2", "tile_no_3", "tile_no_4", "tile_no_5", "tile_no_6")
)
# look up initial tile probabilities
data <- probs_lookup(data, dprob,
c("tile_no_1", "tile_no_2", "tile_no_3", "tile_no_4", "tile_no_5", "tile_no_6"))
# calculate the diversity of numbers in the first 2 placements
data <-
data %>%
dplyr::rowwise() %>%
dplyr::mutate(
tile_no_div =
ifelse(0 %in% unique(c(tile_no_1, tile_no_2, tile_no_3,tile_no_4, tile_no_5, tile_no_6)),
length(unique(c(tile_no_1, tile_no_2, tile_no_3,tile_no_4, tile_no_5, tile_no_6)))-1,
length(unique(c(tile_no_1, tile_no_2, tile_no_3,tile_no_4, tile_no_5, tile_no_6)))
)
)
# Calculate the probability of receiving a resource on a dice role
res_list <- c("O", "W", "S", "C", "L")
data[,res_list] <- 0
for (row in seq(nrow(data))) {
for (tile in seq(6)) {
res_col <- paste("tile_res_", tile, sep = "")
prob_col <- paste("tile_prob_", tile, sep = "")
res <- as.character(data[row,res_col])
prob <- as.numeric(data[row, prob_col])
if (res %in% res_list) {
data[row, res] <- data[row, res] + prob
}
}
}
# Expected resource return per turn
data["exp_res_gain"] <- rowSums(data[res_list])
# identify whether ports were selected in the first 2 placements
port_list <- c("3G", "2O", "2W", "2S", "2C", "2L")
data[,port_list] <- 0
for (row in seq(nrow(data))) {
for (tile in seq(6)) {
port_col <- paste("tile_res_", tile, sep = "")
port <- as.character(data[row,res_col])
if (port %in% port_list) {
data[row, port] <- 1
}
}
}
# Diversity of ports
data["port_div"] <- rowSums(data[c("3G", "2S", "2W", "2C", "2L")])
# Interaction terms between resource probability and port type
data["res_port_alignment"] <- rowSums(data[port_list[port_list!="3G"]]*data[res_list])
# General port alignment is based on the probability of the most likely resource
data["res_port_alignment"] <- data["res_port_alignment"] + rowSums(data["3G"]*rowMaxs(as.matrix(data[res_list])))
# Gain and loss stats
data["prod_ratio"] <- data$production/data$totalGain        # ratio of total gain from production
data["trade_ratio"] <- data$tradeGain/data$totalGain        # ratio of t, otal gain from trade
data["trade_return"] <- data$tradeGain/data$tradeLoss       # ratio of gain:loss through trade
data["tribute_loss_ratio"] <- data$tribute/data$totalGain   # portion of gain lost to poor resource management
attach(data)
temp <- data[c(res_list, "exp_res_gain", "points")] %>%
setnames(
old = c("O", "S", "W", "L", "C", "exp_res_gain"),
new = c("1.Ore", "2.Sheep", "3.Wheat", "4.Lumber", "5.Clay", "6.Overall Expected Resource Gain")
) %>%
pivot_longer(cols = c("1.Ore", "2.Sheep", "3.Wheat", "4.Lumber", "5.Clay", "6.Overall Expected Resource Gain"))
exp_res_plot <- ggplot(temp, aes(x=value, y=points))+
geom_point()+
geom_smooth()+
labs(x = "Expected Return", y = "Points")+
facet_wrap(vars(name), ncol = 3, nrow = 2, scales = "free_x")+
theme_bw()
exp_res_plot
align_plot <- ggplot(data, aes(x=res_port_alignment, y=points))+
geom_count()+
labs(title = "Port Alignment", x = "Resource to Port Alignment", y = "Points")+
theme_bw()
div_plot <- ggplot(data, aes(x=tile_no_div, y=points))+
geom_count()+
labs(title = "Number Diversity", x = "Number Diversity", y = "Points")+
theme_bw()
ggarrange(ggMarginal(div_plot, type = "histogram", fill = "transparent"),
ggMarginal(align_plot, type = "histogram", fill = "transparent"))
temp <- data[c("prod_ratio","trade_ratio", "trade_return", "tribute_loss_ratio", "points")] %>%
setnames(
old = c("prod_ratio","trade_ratio", "trade_return", "tribute_loss_ratio"),
new = c("1.Production Ratio", "2.Trade Ratio", "3.Trade Return", "4.Tribute Loss Ratio")) %>%
pivot_longer(cols = c("1.Production Ratio", "2.Trade Ratio", "3.Trade Return", "4.Tribute Loss Ratio"))
ratio_plot <- ggplot(temp, aes(x=value, y=points))+
geom_point()+
geom_smooth()+
labs(x = "Ratio", y = "Points")+
facet_wrap(vars(name), ncol = 2, nrow = 2, scales = "free_x")+
theme_bw()
ratio_plot
# Strategy characteristics used for clustering
pred_vars <- c("tile_no_div", res_list, "exp_res_gain", "res_port_alignment",
"prod_ratio", "trade_ratio", "trade_return", "tribute_loss_ratio")
X <- data[pred_vars]
corrplot(cor(X))
# Remove trade ratio due to high corrlation witbh prod_ratio
X<-X[names(X)!="trade_ratio"]
# standardize predictors to avoid biasing to scale
X_std <- scale(X)
# determine optimal number of clusters
fviz_nbclust(X_std, kmeans, method = "silhouette")
# Cluster
k.2 <- kmeans(X_std, 2)
# add labels to initial data set
data["strat_cluster"]<-as.factor(k.2$cluster)
# Plot
plot.data <- summarySE(data, measurevar = "win", groupvars = "strat_cluster", conf.interval = 0.9)
win_plot <- ggplot(plot.data, aes(x = strat_cluster, y = win))+
geom_bar(fill = "skyblue", stat = "identity", size = 0.3, width = 0.6)+
geom_errorbar(aes(ymin = win-ci, ymax = win+ci), width=0.1, size = 0.3)+
xlab("Strategy")+
ylab("Average Win Rate")+
theme_bw()
win_plot
plot.data <- summarySE(data, measurevar = "points", groupvars = "strat_cluster", conf.interval = 0.9)
point_plot <- ggplot(plot.data, aes(x = strat_cluster, y = points, fill = strat_cluster))+
geom_bar(fill = "skyblue", stat = "identity", size = 0.3, width = 0.6)+
geom_errorbar(aes(ymin = points-ci, ymax = points+ci), width=0.1, size = 0.3)+
xlab("Strategy")+
ylab("Average Points")+
theme_bw()
point_plot
point_plot <- ggplot(data, aes(x = strat_cluster, fill = player))+
geom_bar(size = 0.3, width = 0.6)+
xlab("Strategy")+
ylab("Frequency")+
theme_bw()
point_plot
strat_means <- data %>%
select(c("strat_cluster",pred_vars)) %>%
group_by(strat_cluster) %>%
dplyr::mutate(n = n()) %>%
summarise_all(~mean(.))
for (col in colnames(strat_means)) {
if(col != "strat_cluster"){
strat_means[col] <- round(strat_means[col], 3)
}
}
strat_means <- t(strat_means)
colnames(strat_means) <- as.character(unlist(strat_means[1,]))
strat_means = strat_means[-1, ]
rownames(strat_means) <- c("Tile Number Diversity", "Expected Ore", "Expected Wheat",
"Expected Sheep", "Expected Clay", "Expected Lumber",
"Expected Resource Gain", "Resource and Port Alignment",
"Production Ratio", "Trade Ratio",
"Trade Return", "Tribute Loss Rate", "Frequency")
stargazer(strat_means,
type="latex",
title = "Cluster Means",
covariate.labels = c("","Strategy 1", "Strategy 2", "Strategy 3"),
digits = 3,
digits.extra = 3)
View(strat_means)
player_plot <- ggplot(data, aes(x = player, fill = strat_cluster))+
geom_bar(size = 0.3, width = 0.6, position = position_dodge())+
xlab("Strategy")+
ylab("Frequency")+
theme_bw()
point_plot
player_plot
win_plot <- ggplot(plot.data, aes(x = strat_cluster, y = win))+
geom_bar( stat = "identity", size = 0.3, width = 0.6)+
geom_errorbar(aes(ymin = win-ci, ymax = win+ci), width=0.1, size = 0.3)+
xlab("Strategy")+
ylab("Average Win Rate")+
theme_bw()
point_plot <- ggplot(plot.data, aes(x = strat_cluster, y = points, fill = strat_cluster))+
geom_bar( stat = "identity", size = 0.3, width = 0.6)+
geom_errorbar(aes(ymin = points-ci, ymax = points+ci), width=0.1, size = 0.3)+
xlab("Strategy")+
ylab("Average Points")+
theme_bw()
ggarrange(point_plot, win_plot, ncol = 2, nrow = 1)
ggarrange(point_plot, win_plot)
point_plot <- ggplot(plot.data, aes(y = strat_cluster, x = points, fill = strat_cluster))+
geom_bar( stat = "identity", size = 0.3, width = 0.6)+
geom_errorbar(aes(ymin = points-ci, ymax = points+ci), width=0.1, size = 0.3)+
xlab("Strategy")+
ylab("Average Points")+
theme_bw()
win_plot <- ggplot(plot.data, aes(y = strat_cluster, x = win))+
geom_bar( stat = "identity", size = 0.3, width = 0.6)+
geom_errorbar(aes(ymin = win-ci, ymax = win+ci), width=0.1, size = 0.3)+
xlab("Strategy")+
ylab("Average Win Rate")+
theme_bw()
ggarrange(point_plot, win_plot)
point_plot
point_plot <- ggplot(plot.data, aes(x = strat_cluster, y = points))+
geom_bar( stat = "identity", size = 0.3, width = 0.6)+
geom_errorbar(aes(ymin = points-ci, ymax = points+ci), width=0.1, size = 0.3)+
xlab("Strategy")+
ylab("Average Points")+
theme_bw()
point_plot
win_plot <- ggplot(plot.data, aes(x = strat_cluster, y = win))+
geom_bar( stat = "identity", size = 0.3, width = 0.6)+
geom_errorbar(aes(ymin = win-ci, ymax = win+ci), width=0.1, size = 0.3)+
xlab("Strategy")+
ylab("Average Win Rate")+
theme_bw()
ggarrange(point_plot, win_plot)
win_plot
win_plot
win_plot <- ggplot(plot.data1, aes(x = strat_cluster, y = win))+
geom_bar( stat = "identity", size = 0.3, width = 0.6)+
geom_errorbar(aes(ymin = win-ci, ymax = win+ci), width=0.1, size = 0.3)+
xlab("Strategy")+
ylab("Average Win Rate")+
theme_bw()
plot.data1 <- summarySE(data, measurevar = "win", groupvars = "strat_cluster", conf.interval = 0.9)
win_plot <- ggplot(plot.data1, aes(x = strat_cluster, y = win))+
geom_bar( stat = "identity", size = 0.3, width = 0.6)+
geom_errorbar(aes(ymin = win-ci, ymax = win+ci), width=0.1, size = 0.3)+
xlab("Strategy")+
ylab("Average Win Rate")+
theme_bw()
plot.data2 <- summarySE(data, measurevar = "points", groupvars = "strat_cluster", conf.interval = 0.9)
point_plot <- ggplot(plot.data2, aes(x = strat_cluster, y = points))+
geom_bar( stat = "identity", size = 0.3, width = 0.6)+
geom_errorbar(aes(ymin = points-ci, ymax = points+ci), width=0.1, size = 0.3)+
xlab("Strategy")+
ylab("Average Points")+
theme_bw()
ggarrange(point_plot, win_plot)
ggarrange(point_plot, win_plot, labels = c("Points Accumulated", "Win Rate"))
win_plot <- ggplot(plot.data1, aes(x = strat_cluster, y = win))+
geom_bar( stat = "identity", size = 0.3, width = 0.6)+
geom_errorbar(aes(ymin = win-ci, ymax = win+ci), width=0.1, size = 0.3)+
labs(title = "Win Rate")+
xlab("Strategy")+
ylab("Average Win Rate")+
theme_bw()
point_plot <- ggplot(plot.data2, aes(x = strat_cluster, y = points))+
geom_bar( stat = "identity", size = 0.3, width = 0.6)+
geom_errorbar(aes(ymin = points-ci, ymax = points+ci), width=0.1, size = 0.3)+
labs(title = "Points Accumulated")+
xlab("Strategy")+
ylab("Average Points")+
theme_bw()
ggarrange(point_plot, win_plot
ggarrange(point_plot, win_plot)
ggarrange(point_plot, win_plot)
rf <- randomForest(points~O+S+W+L+C+
exp_res_gain+tile_no_div+res_port_alignment+prod_ratio+
trade_return+tribute_loss_ratio+strat_cluster,
data = data,
ntree = 1000,
importance = TRUE)
pred_vars <- c("O","S","W","L","C","exp_res_gain","tile_no_div",
"res_port_alignment","prod_ratio", "trade_return",
"tribute_loss_ratio", "strat_cluster")
rf <- randomForest(points~O+S+W+L+C+
exp_res_gain+tile_no_div+res_port_alignment+prod_ratio+
trade_return+tribute_loss_ratio+strat_cluster,
data = data,
ntree = 1000,
importance = TRUE)
rf
varImpPlot(rf)
important_vars <- importance(rf)
#Drop features that have less than 1% decrease
important_vars <- rownames(important_vars)[important_vars[1]>0]
important_vars
important_vars <- importance(rf, main = "Random Forest Feature Importance Plot")
varImpPlot(rf, , main = "Random Forest Feature Importance Plot")
varImpPlot(rf, main = "Random Forest Feature Importance Plot")
varImpPlot(rf,
main = "Random Forest Feature Importance Plot",
labels = c("Expected Ore", "Expected Sheep", "Expected Wheat", "Expected Lumber", "Expected Clay", "Expected Resource Gain", "Tile Number Diversity", "Resource and Port Alignment", "Production Ratio", "Trade Return", "Tribute Loss Rate", "Strategy Cluster")
)
varImpPlot(rf,
main = "Random Forest Feature Importance Plot",
labels = c("Expected Ore", "Expected Sheep", "Expected Wheat", "Expected Lumber", "Expected Clay", "Expected Resource Gain", "Tile Number Diversity", "Port Alignment", "Production Ratio", "Trade Return", "Tribute Loss Rate", "Strategy Cluster")
)
varImpPlot(rf,
main = "Random Forest Feature Importance Plot",
labels = c("Expected Ore", "Expected Sheep", "Expected Wheat", "Expected Lumber", "Expected Clay", "Expected Overall", "Tile Number Diversity", "Port Alignment", "Production Ratio", "Trade Return", "Tribute Loss Rate", "Strategy Cluster")
)
varImpPlot(rf,
main = "Random Forest Feature Importance Plot",
labels = c("Expected Ore", "Expected Sheep", "Expected Wheat", "Expected Lumber", "Expected Clay", "Expected Overall", "Tile Num Diversity", "Port Alignment", "Production Ratio", "Trade Return", "Tribute Loss Rate", "Strategy Cluster")
)
varImpPlot(rf,
main = "Random Forest Feature Importance Plot",
labels = c("Expected Ore", "Expected Sheep", "Expected Wheat", "Expected Lumber", "Expected Clay", "Expected Overall", "Tile Num Diversity", "Port Alignment", "Production Ratio", "Trade Return", "Tribute Loss Rate", "Strategy Cluster")
)
important_vars <- importance(rf)
view(important_vars)
View(important_vars)
varImpPlot(rf,
main = "Random Forest Feature Importance Plot",
labels = c("Expected Ore", "Expected Sheep", "Expected Wheat", "Expected Lumber", "Expected Clay", "Expected Overall", "Tile Num Diversity", "Port Alignment", "Production Ratio", "Trade Return", "Tribute Loss Rate", "Strategy Cluster")
)
varImpPlot(rf,
main = "Random Forest Feature Importance Plot")
c("Expected Overall", "Expected Ore", "Expected Sheep", "Expected Wheat", "Expected Lumber", "Expected Clay",  "Tile Num Diversity", "Port Alignment", "Production Ratio", "Trade Return", "Tribute Loss Rate", "Strategy Cluster")
varImpPlot(rf,
main = "Random Forest Feature Importance Plot",
c("Expected Overall", "Expected Ore", "Expected Sheep", "Expected Wheat", "Expected Lumber", "Expected Clay",  "Tile Num Diversity", "Port Alignment", "Production Ratio", "Trade Return", "Tribute Loss Rate", "Strategy Cluster"))
varImpPlot(rf,
main = "Random Forest Feature Importance Plot",
labls = c("Expected Overall", "Expected Ore", "Expected Sheep", "Expected Wheat", "Expected Lumber", "Expected Clay",  "Tile Num Diversity", "Port Alignment", "Production Ratio", "Trade Return", "Tribute Loss Rate", "Strategy Cluster"))
varImpPlot(rf,
main = "Random Forest Feature Importance Plot",
labels = c("Expected Overall", "Expected Ore", "Expected Sheep", "Expected Wheat", "Expected Lumber", "Expected Clay",  "Tile Num Diversity", "Port Alignment", "Production Ratio", "Trade Return", "Tribute Loss Rate", "Strategy Cluster"))
varImpPlot(rf,
main = "Random Forest Feature Importance Plot")
set.seed(0)
params <- expand.grid(ntrees = seq(100, 500, 100),
depth = seq(2,5),
min_obs = seq(1, 5))
params["avg_MSE"] <- 0
for (i in seq(nrow(params))) {
boost <- gbm(points~O+S+W+C+exp_res_gain+res_port_alignment+prod_ratio+tribute_loss_ratio+strat_cluster,
data = data,
n.trees = params$ntrees[i],
interaction.depth = params$depth[i],
n.minobsinnode = params$min_obs[i],
cv.folds = 5
)
params[i,"avg_MSE"] <- mean(boost$cv.error)
}
best_params <- params %>% slice_min(order_by = avg_MSE, n = 10)
stargazer(best_params, summary = FALSE)
View(best_params)
boost
win_acc <- c()
set.seed(NULL)
win_acc <- c()
# Calculate winning prediction accuracy
for (i in seq(1000)) {
test_games <- sample(1:50, size = 5)
test <- data[data$gameNum %in% test_games,]
train <- data[!(data$gameNum %in% test_games),]
boost <- gbm(points~O+S+W+C+exp_res_gain+res_port_alignment+prod_ratio+tribute_loss_ratio+strat_cluster,
data = train,
n.trees = 100,
interaction.depth = 3,
n.minobsinnode = 5
)
test["pred_points"]<- predict(boost, test)
test <- test %>%
group_by(gameNum) %>%
mutate(max_points = max(pred_points)) %>%
mutate(pred_win = ifelse(pred_points == max_points, 1, 0))
test <- test[test$pred_win == 1,]
win_acc[i] <- mean(test$win==test$pred_win)
}
mean(win_acc)
logit <- glm(win~O+S+W+C+exp_res_gain+res_port_alignment+prod_ratio+tribute_loss_ratio+strat_cluster, family = "binomial", data = data, na.action = na.omit)
summary(logit)
stargazer(logit, type = "latex")
logit
predict(logit, test, type = "response")
View(temp)
View(test)
View(train)
test <- data[data$gameNum %in% test_games,]
View(test)
# Calculate winning prediction accuracy
for (i in seq(1000)) {
test_games <- sample(1:50, size = 5)
test <- data[data$gameNum %in% test_games,]
train <- data[!(data$gameNum %in% test_games),]
logit <- glm(points~O+S+W+C+exp_res_gain+res_port_alignment+prod_ratio+tribute_loss_ratio+strat_cluster,
data = train,
family = "binomial"
)
test["pred_prob"]<- predict(logit, test, type = "response")
test <- test %>%
group_by(gameNum) %>%
mutate(max_prob = max(pred_prob)) %>%
mutate(pred_win = ifelse(pred_prob == max_poprob, 1, 0))
test <- test[test$pred_win == 1,]
win_acc[i] <- mean(test$win==test$pred_win)
}
# Calculate winning prediction accuracy
for (i in seq(1000)) {
test_games <- sample(1:50, size = 5)
test <- data[data$gameNum %in% test_games,]
train <- data[!(data$gameNum %in% test_games),]
logit <- glm(win~O+S+W+C+exp_res_gain+res_port_alignment+prod_ratio+tribute_loss_ratio+strat_cluster,
data = train,
family = "binomial"
)
test["pred_prob"]<- predict(logit, test, type = "response")
test <- test %>%
group_by(gameNum) %>%
mutate(max_prob = max(pred_prob)) %>%
mutate(pred_win = ifelse(pred_prob == max_poprob, 1, 0))
test <- test[test$pred_win == 1,]
win_acc[i] <- mean(test$win==test$pred_win)
}
# Calculate winning prediction accuracy
for (i in seq(1000)) {
test_games <- sample(1:50, size = 5)
test <- data[data$gameNum %in% test_games,]
train <- data[!(data$gameNum %in% test_games),]
logit <- glm(win~O+S+W+C+exp_res_gain+res_port_alignment+prod_ratio+tribute_loss_ratio+strat_cluster,
data = train,
family = "binomial"
)
test["pred_prob"]<- predict(logit, test, type = "response")
test <- test %>%
group_by(gameNum) %>%
mutate(max_prob = max(pred_prob)) %>%
mutate(pred_win = ifelse(pred_prob == max_prob, 1, 0))
test <- test[test$pred_win == 1,]
win_acc[i] <- mean(test$win==test$pred_win)
}
mean(win_acc)
# Calculate winning prediction accuracy
for (i in seq(1000)) {
test_games <- sample(1:50, size = 5)
test <- data[data$gameNum %in% test_games,]
train <- data[!(data$gameNum %in% test_games),]
logit <- glm(win~O+S+W+C+exp_res_gain+res_port_alignment+prod_ratio+tribute_loss_ratio+strat_cluster,
data = train,
family = "binomial"
)
test["pred_prob"]<- predict(logit, test, type = "response")
test <- test %>%
group_by(gameNum) %>%
mutate(max_prob = max(pred_prob)) %>%
mutate(pred_win = ifelse(pred_prob == max_prob, 1, 0))
test <- test[test$pred_win == 1,]
win_acc[i] <- mean(test$win==test$pred_win)
}
mean(win_acc)
# Calculate winning prediction accuracy
for (i in seq(1000)) {
test_games <- sample(1:50, size = 5)
test <- data[data$gameNum %in% test_games,]
train <- data[!(data$gameNum %in% test_games),]
logit <- glm(win~O+S+W+C+exp_res_gain+res_port_alignment+prod_ratio+tribute_loss_ratio+strat_cluster,
data = train,
family = "binomial"
)
test["pred_prob"]<- predict(logit, test, type = "response")
test <- test %>%
group_by(gameNum) %>%
mutate(max_prob = max(pred_prob)) %>%
mutate(pred_win = ifelse(pred_prob == max_prob, 1, 0))
test <- test[test$pred_win == 1,]
win_acc[i] <- mean(test$win==test$pred_win)
}
mean(win_acc)
